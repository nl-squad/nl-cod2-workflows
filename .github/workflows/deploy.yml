name: Deployment

on:
  workflow_call:
    inputs:
      profile:
        required: true
        type: string
      branch:
        required: true
        type: string
      sha:
        required: false
        type: string

jobs:
  deploy:
    name: Deploy server files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ inputs.sha || github.event.inputs.branch || 'main' }}

    - name: Send message to server
      run: |
        project_definition="project-definition.json"
        if [ ! -f $project_definition ]; then
            echo "Error: $project_definition doesn't exist."
            exit 1
        fi

        function extract_value_or_exit() {
          local key=$1
          local value=$(jq -r "$key" "$project_definition")

          if [ "$value" = "null" ]; then
              echo "Error: $key not found in the $project_definition file."
              exit 1
          fi

          echo "$value"
        }

        ###

        profile=${{ inputs.profile }}
        rcon=$(extract_value_or_exit ".profiles.\"$profile\".cod2.rconPassword") || { echo "Skipping - no rcon password found"; exit 0; }
        cod2_port=$(extract_value_or_exit ".profiles.\"$profile\".cod2.port") || { echo "Skipping - no cod2 port found"; exit 0; }
        connection_address=$(extract_value_or_exit '.connection.address')

        cmd="say ^8[UPDATE] ^7Continous deployment ^9updated mod version"
        echo "Executing command '$cmd' for server $connection_address:$cod2_port"
        echo -n -e "\xff\xff\xff\xffrcon $rcon $cmd" | nc -u -w 2 $connection_address $cod2_port

    - name: Deploy server files
      run: |
        project_definition="project-definition.json"
        if [ ! -f $project_definition ]; then
            echo "Error: $project_definition doesn't exist. Please use mynl CLI tool from within NL directory."
            exit 1
        fi

        function extract_value_or_exit() {
          local key=$1
          local value=$(jq -r "$key" "$project_definition")

          if [ "$value" = "null" ]; then
              echo "Error: $key not found in the $project_definition file."
              exit 1
          fi

          echo "$value"
        }

        ###

        profile=${{ inputs.profile }}
        connection_address=$(extract_value_or_exit '.connection.address')
        connection_user=$(extract_value_or_exit '.connection.user')
        connection_key_path=~/private_key
        deployment_remote_path=$(extract_value_or_exit ".profiles.\"$profile\".remoteDeploymentPath")
        deployment_local_path=$(extract_value_or_exit ".profiles.\"$profile\".localDeploymentPath")
        exclude_list=($(jq -r ".profiles.\"$profile\".rsyncExclude | .[]" "$project_definition"))
        for exclude_item in "${exclude_list[@]}"; do
          exclude_options+=("--exclude=$exclude_item")
        done
        echo "Deploying from: $deployment_local_path"
        echo "Deploying to: $connection_user@$connection_address:$deployment_remote_path"

        echo "${{ secrets.VPS_PRIVATE_KEY }}" > $connection_key_path
        chmod 600 $connection_key_path
        echo "Private key set up"

        echo "rsync -az -e \"ssh -i $connection_key_path -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\" --progress --delete ${exclude_options[@]} ./* $connection_user@$connection_address:$deployment_remote_path"
        (cd $deployment_local_path && rsync -az -e "ssh -i $connection_key_path -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --progress --delete ${exclude_options[@]} ./* $connection_user@$connection_address:$deployment_remote_path)

        rm -f $connection_key_path
      env:
        PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}
